"""
File to test fit_sigmoid data
"""
import helper_functions as hf
import numpy as np
import scipy.optimize as opt


sigmoid_params = [[40.717791464824835, 52.00828591783058, 52.00828591783058, 250.47503379610626]]
params_set_index = 0
corrected_ccnc_counts = [7.84413220e-07,  7.44660924e-07,  2.14835644e-07, -4.12105887e-07,  8.86999970e+00,  4.61999954e+00,  9.99999441e-07,  9.99999176e-07, -1.88190054e-06, -3.15876601e-06, -1.64807350e-05,  6.90999947e+00, -1.03250422e-05, -3.01630806e-05, -1.17739813e-04, -7.20712579e-05, -9.63212192e-05, -2.86521922e-04, -3.44766917e-04,  4.46941268e+00, -7.65877641e-04, -1.51807013e-03, -1.95134276e-03, -3.34076998e-03, -4.69941292e-03, -8.66716501e-03, -1.25443693e-02, -1.73914770e-02, -3.08123765e-02, -3.91352606e-02, -4.54203646e-02, -7.12151862e-02, -1.11996439e-01, -1.50999290e-01, -1.85866426e-01, -2.37190300e-01, -3.22702429e-01, -4.54188231e-01, -5.33744251e-01, -7.41605333e-01, -9.78367336e-01, -1.14087264e+00, -1.61074621e+00, -2.08143857e+00, -2.44933272e+00, -3.25963059e+00, -3.48175275e+00, -5.09243346e+00, -9.88214714e-01,  2.30320950e+00,  5.14453517e+00,  3.42559303e+01,  3.25434418e+01,  3.57181481e+01,  4.60169764e+01,  4.90224185e+01,  4.54405716e+01,  3.53420601e+01,  3.13938643e+01,  8.28695498e+01,  2.22424741e+02,  4.15989533e+02,  6.71289833e+02,  9.64983336e+02,  1.16281715e+03,  1.31636716e+03,  1.62733099e+03,  1.59021417e+03,  1.78860204e+03,  1.78184453e+03,  1.73049786e+03,  1.83106715e+03,  1.83606680e+03,  1.67345461e+03,  1.90038108e+03,  1.73875638e+03,  1.78869971e+03,  1.77373463e+03,  1.62699657e+03,  1.65260292e+03,  1.56346875e+03,  1.40103269e+03,  1.49663309e+03,  1.36550381e+03,  1.35960152e+03,  1.19717952e+03,  1.19300136e+03,  1.05727989e+03,  9.22306663e+02,  8.76326084e+02,  8.00806423e+02,  7.07848059e+02,  6.58920555e+02,  5.81201420e+02,  5.30674781e+02,  4.64372442e+02,  4.58016160e+02,  4.76044720e+02,  4.40874571e+02,  3.94100468e+02,  2.76494257e+02,  2.08580471e+02,  2.10127998e+02,  2.03774043e+02,  1.94465062e+02,  7.44288881e+01,  1.08706688e+02,  1.02558089e+02,  1.30521884e+02,  6.41137266e+01,  8.94855187e+01,  7.53577080e+01,  5.25809867e+01,  6.31940787e+01,  1.02067417e+02,  5.09994776e+01,  6.57011520e+01,  8.30719357e+01,  2.14820237e+01,  9.12632326e+01,  1.53816565e+01,  3.35350390e+01,  4.67137156e+01,  1.06398657e+01,  0.00000000e+00,  0.00000000e+00,  2.17424100e+02,  2.38957491e+02,  1.05644938e+02,  1.98607307e+01,  1.86175993e+01,  0.00000000e+00,  7.84473569e+00,  0.00000000e+00,  8.02248033e-01]
corrected_smps_counts = [4.79999978e+00, 3.59999974e+00, 7.19999921e+00, 8.39999859e+00, 1.19999970e+00, 1.19999954e+00, 9.99999441e-07, 9.99999176e-07, 2.39999712e+00, 2.39999584e+00, 7.19998252e+00, 2.39999445e+00, 2.39998867e+00, 4.79996884e+00, 1.31998813e+01, 5.99992693e+00, 5.99990344e+00, 1.31997125e+01, 1.19996542e+01, 1.55994127e+01, 1.55992659e+01, 2.39984809e+01, 2.39980477e+01, 3.23966582e+01, 3.59954608e+01, 5.27913318e+01, 6.11874546e+01, 6.83830654e+01, 9.83691866e+01, 1.01960864e+02, 9.71562786e+01, 1.25928784e+02, 1.64288003e+02, 1.84655813e+02, 1.90614133e+02, 2.04976177e+02, 2.36077297e+02, 2.82775749e+02, 2.83866255e+02, 3.38858394e+02, 3.85491581e+02, 3.88859126e+02, 4.77305890e+02, 5.37918560e+02, 5.54613664e+02, 6.48340368e+02, 6.11341305e+02, 7.90830269e+02, 7.56511785e+02, 9.02048621e+02, 9.17581983e+02, 1.03229593e+03, 1.08663921e+03, 1.14286855e+03, 1.22140698e+03, 1.29038105e+03, 1.33433918e+03, 1.40541623e+03, 1.49238386e+03, 1.60854957e+03, 1.67135249e+03, 1.77604966e+03, 1.77777000e+03, 1.86706606e+03, 1.98051805e+03, 1.99220716e+03, 2.07286290e+03, 2.04306092e+03, 2.22080380e+03, 2.10850151e+03, 2.16267363e+03, 2.23259732e+03, 2.03280680e+03, 2.09750617e+03, 2.21802956e+03, 1.98186702e+03, 2.05826063e+03, 1.96656759e+03, 1.97757346e+03, 1.74906621e+03, 1.71538376e+03, 1.69291752e+03, 1.56954993e+03, 1.39122410e+03, 1.36392022e+03, 1.27007246e+03, 1.17644836e+03, 1.10986006e+03, 1.02281591e+03, 9.52183054e+02, 8.15454218e+02, 7.16794173e+02, 6.65602889e+02, 6.39418411e+02, 5.33910994e+02, 4.84889854e+02, 4.51047266e+02, 3.88275328e+02, 3.45385339e+02, 3.22949839e+02, 2.95710098e+02, 2.58533277e+02, 2.27264744e+02, 2.03408280e+02, 1.69975442e+02, 1.77020235e+02, 1.40024312e+02, 1.27719512e+02, 1.17128093e+02, 9.47913596e+01, 8.06072290e+01, 7.57278970e+01, 7.00924912e+01, 6.00890994e+01, 5.15261698e+01, 4.59919086e+01, 3.52344876e+01, 3.84177772e+01, 3.27759247e+01, 2.61493951e+01, 2.67270134e+01, 2.08755006e+01, 1.80279956e+01, 1.63853487e+01, 8.00471999e+01, 5.19655189e+02, 6.35049115e+02, 3.31376286e+02, 1.77648090e+02, 9.24566538e+01, 4.91771255e+01, 3.19809049e+01, 2.00027425e+01, 1.51421229e+01, 7.58224803e+00]
ave_smps_diameters = [7.15713761,   7.37146835,   7.5850007,   7.81238712,   8.03673247,   8.27818139,   8.51986246,   8.7759647 ,   9.03931956,   9.31133856,   9.57614506,   9.86156183,  10.14404956,  10.44112798,  10.76314449,  11.08051597,  11.39836178,  11.74487781,  12.09370784,  12.44704745,  12.8206599 ,  13.19592902,  13.59090122,  13.98694048,  14.40392128,  14.83348504,  15.27526078,  15.7298866 ,  16.19584482,  16.67793399,  17.17405049,  17.68168261,  18.2101522 ,  18.75610717,  19.31608008,  19.8941271 ,  20.49034856,  21.10315777,  21.73722282,  22.38555701,  23.05707955,  23.75228562,  24.46620576,  25.20351655,  25.96290087,  26.74679534,  27.55324309,  28.38848606,  29.24695306,  30.13352997,  31.04873925,  31.99197731,  32.96481815,  33.96984761,  35.00847151,  36.07776657,  37.18441552,  38.32675434,  39.50355725,  40.71779146,  41.97406108,  43.27282535,  44.61101403,  45.99543308,  47.42646991,  48.90174837,  50.42907819,  52.00828592,  53.64080145,  55.32955019,  57.07239761,  58.87692429,  60.7457576 ,  62.67693268,  64.67524945,  66.74474852,  68.88719917,  71.10685962,  73.40529841,  75.7873684 ,  78.25032578,  80.80948056,  83.45832192,  86.21639176,  89.06320448,  92.02703351,  95.09604062,  98.28432351, 101.60074799, 105.04286636, 108.61846699, 112.33676621, 116.20641996, 120.24373825, 124.42269193, 128.78538969, 133.32302215, 138.07011406, 142.99837265, 148.15277493, 153.50985499, 159.1236181 , 164.97566277, 171.11070361, 177.48519595, 184.18700136, 191.13719571, 198.50437264, 206.12368352, 214.15881019, 222.57298299, 231.45708054, 240.70285602, 250.4750338 , 260.56110915, 271.39303479, 282.41265002, 294.39892103, 306.98804123, 319.97657609, 333.79568424, 348.45352164, 363.83039827, 381.70061726, 401.25068325, 416.43480105, 433.14858067, 452.62140534, 473.68775655, 496.04213997, 519.5601996 , 544.10280625, 570.257918  , 598.05233235, 627.24254708]
asym_limits = [0.75, 1.5]
functions_params = []
sigmoid_y_vals = []
dps = []


begin_rise = sigmoid_params[params_set_index][0]
end_rise = sigmoid_params[params_set_index][1]
begin_asymp = sigmoid_params[params_set_index][2]
end_asymp = sigmoid_params[params_set_index][3]
ratio_corrected = hf.safe_div_array(corrected_ccnc_counts, corrected_smps_counts)
# smooth the hell out of the data
ratio_corrected = hf.heavy_smooth(ratio_corrected)
# get b
ave_list = []
for i in range(len(ave_smps_diameters)):
    if begin_asymp < ave_smps_diameters[i] < end_asymp and asym_limits[0] < ratio_corrected[i] < \
            asym_limits[1]:
        ave_list.append(ratio_corrected[i])
b = hf.get_ave_none_zero(ave_list)
if not asym_limits[0] <= b <= asym_limits[1]:
    b = 1


def fn(x, dd, cc):
    """
    # REVIEW Documentation the function for which we will fit the sigmoid line for
    # RESEARCH Better variable names and function name

    :param x:
    :type x:
    :param dd:
    :type dd:
    :param cc:
    :type cc:
    :return:
    :rtype:
    """
    # COMBAKL Sigmoid
    return b / (1 + (x / dd) ** cc)


x_list = []
y_list = []
# get all data points on the rise
for i in range(len(ave_smps_diameters)):
    if begin_rise < ave_smps_diameters[i] < end_rise:
        x_list.append(ave_smps_diameters[i])
        y_list.append(ratio_corrected[i])
# get all data points on the asymp
for i in range(len(ave_smps_diameters)):
    if begin_asymp < ave_smps_diameters[i] < end_asymp:
        x_list.append(ave_smps_diameters[i])
        y_list.append(ratio_corrected[i])
x_list = np.asarray(x_list)
y_list = np.asarray(y_list)
# noinspection PyBroadException
try:
    # RESEARCH OptimizeWarning: Covariance of the parameters could not be estimated category=OptimizeWarning)
    result = opt.curve_fit(fn, x_list, y_list, bounds=([begin_rise, -200], [end_asymp + 1, -1]), method="trf")
    d = result[0][0]
    c = result[0][1]
except Exception:  # RESEARCH error logging to determine what causes
    d = 60
    c = -2
functions_params.append([b, d, c])
dp_50 = d
sigmoid_points = [0]
for i in range(1, len(ave_smps_diameters)):
    if begin_rise <= ave_smps_diameters[i] <= end_asymp:
        sigmoid_points.append(fn(ave_smps_diameters[i], d, c))
    else:
        sigmoid_points.append(sigmoid_points[i - 1])
sigmoid_y_vals.append(sigmoid_points)
dp_50 = round(dp_50, 3)
dps.append([dp_50])

print("======functions_params=====")
print(functions_params)
print("======sigmoid_y_vals=====")
print(sigmoid_y_vals)
print("======dps=====")
print(dps)

import matplotlib.pyplot as plt

fig, ax = plt.subplots()
# set up the figure and axes
ax.set_title("CCNC/SMPS over Dry Diameter")
ax.set_xlabel("Diameter (nm)")
ax.set_ylabel("CCNC/SMPS")
# set up empty data lines
ccn_cn_ratio_points, = ax.plot([0], [0], 'o', label="CCNC/SMPS")
ccn_cn_ratio_points.set_xdata(ave_smps_diameters)
ccn_cn_ratio_corrected_points, = ax.plot([0], [0], 'o', label="CCNC/SMPS corrected")
normalized_conc, = ax.plot([0], [0], label="normalized conc (dNdlogDp)")
sigmoid_lines = []
ax.axhline(1, linestyle='dashed')
ax.legend()
# plot graph
plt.tight_layout()
plt.show()